spotless {
	kotlin {
		target '**/*.kt'

		ktfmt()
		ktlint(versions.ktlint).setUseExperimental(true).userData([
			"indent_style"                              : 'tab',
			'max_line_length'                           : '120',
			'insert_final_newline'                      : 'true',
			'disabled_rules'		                    : 'no-wildcard-imports',
			'ktlint_disabled_rules'                     : 'no-wildcard-imports',
			'trim_trailing_whitespace'                  : 'true',

			// According to https://kotlinlang.org/docs/reference/coding-conventions.html#names-for-test-methods it is acceptable to write method names
			// in natural language. When using natural language, the description tends to be longer. Allow lines containing an identifier between
			// backticks to be longer than the maximum line length.
			'ktlint_ignore_back_ticked_identifier'      : 'true',

			'ij_kotlin_packages_to_use_import_on_demand': 'java.util.*', // allow java.util.* as wildcard import
			'ij_kotlin_packages_to_use_import_on_demand': 'org.junit.Assert.*', // allow org.junit.Assert.* as wildcard import
			'ij_kotlin_packages_to_use_import_on_demand': 'io.ktor.**' // allow wildcard import from io.ktor.* and all subpackages
		])
	}
	groovyGradle {
		target '**/*.gradle'
		greclipse()

		trimTrailingWhitespace()
		endWithNewline()
		indentWithTabs()
	}
	format("misc") {
		// Define the files to apply misc to
		target("*.gradle", "*.md", ".gitignore") // <-- HERE

		indentWithTabs()
		trimTrailingWhitespace()
		endWithNewline()
	}
}

task createSpotlessPreCommitHook() {
	def gitHooksDirectory = new File("$project.rootDir/.git/hooks/")
	def isWindows = System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')
	if (!gitHooksDirectory.exists()) gitHooksDirectory.mkdirs()
	new File("$project.rootDir/.git/hooks", "pre-commit").text = """${isWindows ? "#!/bin/sh" : "#!/bin/bash"}
	echo "Running spotless check"
	./gradlew spotlessApply
"""
	if (!isWindows) "chmod +x .git/hooks/pre-commit".execute()
}

if (project.hasProperty("kapt")) {
	kapt { useBuildCache = true }
}
